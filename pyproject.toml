[project]
name = "api-docs-example"
# Do not manually update this value, it will be updated by Github Actions
version = "0.0.0"
description = "API Docs Example"
readme = "README.md"
dependencies = ["fastapi", "uvicorn[standard]"]

[project.optional-dependencies]
test = ["ruff", "black"]

[build-system]
requires = ["setuptools >= 43.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# Have setuptools include files mentioned in MANIFEST.in in addition to Python
# source.
[tool.setuptools.packages.find]
where = ["src"]

[tool.ruff]
ignore = [
  "ANN101", # mypy can infer the type of self
  "D100",   # modules don't need docstrings
  "D104",   # disable requirement for package docstrings
  "D107",   # __init__ typically doesn't need docstrings, it initializes, we know that.
  "D203",   # a blank line is ugly
  "D213",   # multi line summaries go on the first line
  "S101",   # alerting on assert being used is mad when unit tests exist
  "PT013",  # I prefer to import as needed, rather than pull in all of pytest
]
line-length = 88
target-version = "py39"
select = [
  "A",    # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "BLE",  # flake8-blind-except
  "B",    # flake8-bugbear
  "C",
  "C4",   # flake8-comprehensions
  "C90",  # mccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle errors
  "EM",   # flake8-errmsg
  "EXE",  # flake8-executable
  "F",
  "FBT",  # flake8-boolean-trap
  "FIX",  # flake8-fixme
  "FLY",  # flynt
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "N",    # PEP8 naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "RUF",  # Ruff rules
  "S",    # flake8-bandit
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "T10",  # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle warnings
  "YTT",  # flake8-2020
]

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`, to allow
# for Pydantic/FastAPI to use them.
keep-runtime-typing = true

[tool.ruff.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.pytest]
python_files = "tests/**.py"
pythonpath = "./src"

[tool.pytest.ini_options]
markers = ["integration"]
addopts = "-m 'not integration'"

[tool.coverage.run]
omit = ["*/__version__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true

# Coverage here isn't great because it was extracted from balena-config, which
# didn't have coverage turned on. Rather than dumping more time into test coverage
# this is set to 67, and should be ratcheted up as coverage improves.
fail_under = 71
exclude_lines = [
  "nocov",

  # Don't complain about missing debug code.
  "def __repr__",
  "if self.debug",

  # Don't require testing defensive assertions.
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain when non-runnable code doesn't get run.
  "if 0:",
  "if __name__ == .__main__.:",
]
omit = []

ignore_errors = true

[tool.mypy]
mypy_path = "./src:./tests"
